<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Operations on</title><link>https://example.kafka-site-md.dev/40/operations/</link><description>Recent content in Operations on</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://example.kafka-site-md.dev/40/operations/index.xml" rel="self" type="application/rss+xml"/><item><title>Basic Kafka Operations</title><link>https://example.kafka-site-md.dev/40/operations/basic-kafka-operations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/40/operations/basic-kafka-operations/</guid><description>Basic Kafka Operations This section will review the most common operations you will perform on your Kafka cluster. All of the tools reviewed in this section are available under the bin/ directory of the Kafka distribution and each tool will print details on all possible commandline options if it is run with no arguments.
Adding and removing topics You have the option of either adding topics manually or having them be created automatically when data is first published to a non-existent topic.</description></item><item><title>Datacenters</title><link>https://example.kafka-site-md.dev/40/operations/datacenters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/40/operations/datacenters/</guid><description>Datacenters Some deployments will need to manage a data pipeline that spans multiple datacenters. Our recommended approach to this is to deploy a local Kafka cluster in each datacenter, with application instances in each datacenter interacting only with their local cluster and mirroring data between clusters (see the documentation on Geo-Replication for how to do this).
This deployment pattern allows datacenters to act as independent entities and allows us to manage and tune inter-datacenter replication centrally.</description></item><item><title>Geo-Replication (Cross-Cluster Data Mirroring)</title><link>https://example.kafka-site-md.dev/40/operations/geo-replication-cross-cluster-data-mirroring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/40/operations/geo-replication-cross-cluster-data-mirroring/</guid><description>Geo-Replication (Cross-Cluster Data Mirroring) Geo-Replication Overview Kafka administrators can define data flows that cross the boundaries of individual Kafka clusters, data centers, or geo-regions. Such event streaming setups are often needed for organizational, technical, or legal requirements. Common scenarios include:
Geo-replication Disaster recovery Feeding edge clusters into a central, aggregate cluster Physical isolation of clusters (such as production vs. testing) Cloud migration or hybrid cloud deployments Legal and compliance requirements Administrators can set up such inter-cluster data flows with Kafka&amp;rsquo;s MirrorMaker (version 2), a tool to replicate data between different Kafka environments in a streaming manner.</description></item><item><title>Multi-Tenancy</title><link>https://example.kafka-site-md.dev/40/operations/multi-tenancy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/40/operations/multi-tenancy/</guid><description>Multi-Tenancy Multi-Tenancy Overview As a highly scalable event streaming platform, Kafka is used by many users as their central nervous system, connecting in real-time a wide range of different systems and applications from various teams and lines of businesses. Such multi-tenant cluster environments command proper control and management to ensure the peaceful coexistence of these different needs. This section highlights features and best practices to set up such shared environments, which should help you operate clusters that meet SLAs/OLAs and that minimize potential collateral damage caused by &amp;ldquo;noisy neighbors&amp;rdquo;.</description></item><item><title>Java Version</title><link>https://example.kafka-site-md.dev/40/operations/java-version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/40/operations/java-version/</guid><description>Java Version Java 17 and Java 21 are fully supported while Java 11 is supported for a subset of modules (clients, streams and related). Support for versions newer than the most recent LTS version are best-effort and the project typically only tests with the most recent non LTS version.
We generally recommend running Apache Kafka with the most recent LTS release (Java 21 at the time of writing) for performance, efficiency and support reasons.</description></item><item><title>Hardware and OS</title><link>https://example.kafka-site-md.dev/40/operations/hardware-and-os/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/40/operations/hardware-and-os/</guid><description>Hardware and OS We are using dual quad-core Intel Xeon machines with 24GB of memory.
You need sufficient memory to buffer active readers and writers. You can do a back-of-the-envelope estimate of memory needs by assuming you want to be able to buffer for 30 seconds and compute your memory need as write_throughput*30.
The disk throughput is important. We have 8x7200 rpm SATA drives. In general disk throughput is the performance bottleneck, and more disks is better.</description></item><item><title>Monitoring</title><link>https://example.kafka-site-md.dev/40/operations/monitoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/40/operations/monitoring/</guid><description>Monitoring Kafka uses Yammer Metrics for metrics reporting in the server. The Java clients use Kafka Metrics, a built-in metrics registry that minimizes transitive dependencies pulled into client applications. Both expose metrics via JMX and can be configured to report stats using pluggable stats reporters to hook up to your monitoring system.
All Kafka rate metrics have a corresponding cumulative count metric with suffix -total. For example, records-consumed-rate has a corresponding metric named records-consumed-total.</description></item><item><title>KRaft</title><link>https://example.kafka-site-md.dev/40/operations/kraft/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/40/operations/kraft/</guid><description>KRaft Configuration Process Roles In KRaft mode each Kafka server can be configured as a controller, a broker, or both using the process.roles property. This property can have the following values:
If process.roles is set to broker, the server acts as a broker. If process.roles is set to controller, the server acts as a controller. If process.roles is set to broker,controller, the server acts as both a broker and a controller.</description></item><item><title>Tiered Storage</title><link>https://example.kafka-site-md.dev/40/operations/tiered-storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/40/operations/tiered-storage/</guid><description>Tiered Storage Tiered Storage Overview Kafka data is mostly consumed in a streaming fashion using tail reads. Tail reads leverage OS&amp;rsquo;s page cache to serve the data instead of disk reads. Older data is typically read from the disk for backfill or failure recovery purposes and is infrequent.
In the tiered storage approach, Kafka cluster is configured with two tiers of storage - local and remote. The local tier is the same as the current Kafka that uses the local disks on the Kafka brokers to store the log segments.</description></item><item><title>Consumer Rebalance Protocol</title><link>https://example.kafka-site-md.dev/40/operations/consumer-rebalance-protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/40/operations/consumer-rebalance-protocol/</guid><description>Consumer Rebalance Protocol Overview Starting from Apache Kafka 4.0, the Next Generation of the Consumer Rebalance Protocol (KIP-848) is Generally Available (GA). It improves the scalability of consumer groups while simplifying consumers. It also decreases rebalance times, thanks to its fully incremental design, which no longer relies on a global synchronization barrier.
Consumer Groups using the new protocol are now referred to as Consumer groups, while groups using the old protocol are referred to as Classic groups.</description></item><item><title>Transaction Protocol</title><link>https://example.kafka-site-md.dev/40/operations/transaction-protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/40/operations/transaction-protocol/</guid><description>Transaction Protocol Overview Starting from Apache Kafka 4.0, Transactions Server Side Defense (KIP-890) brings a strengthened transactional protocol. When enabled and using 4.0 producer clients, the producer epoch is bumped on every transaction to ensure every transaction includes the intended messages and duplicates are not written as part of the next transaction.
The protocol is automatically enabled on the server since Apache Kafka 4.0. Enabling and disabling the protocol is controlled by the transaction.</description></item><item><title>Eligible Leader Replicas</title><link>https://example.kafka-site-md.dev/40/operations/eligible-leader-replicas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/40/operations/eligible-leader-replicas/</guid><description>Eligible Leader Replicas Overview Starting from Apache Kafka 4.0, Eligible Leader Replicas (KIP-966 Part 1) is available for the users to an improvement to Kafka replication. As the &amp;ldquo;strict min ISR&amp;rdquo; rule has been generally applied, which means the high watermark for the data partition can&amp;rsquo;t advance if the size of the ISR is smaller than the min ISR(min.insync.replicas), it makes some replicas that are not in the ISR safe to become the leader.</description></item></channel></rss>