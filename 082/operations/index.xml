<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Operations on</title><link>https://example.kafka-site-md.dev/082/operations/</link><description>Recent content in Operations on</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://example.kafka-site-md.dev/082/operations/index.xml" rel="self" type="application/rss+xml"/><item><title>Basic Kafka Operations</title><link>https://example.kafka-site-md.dev/082/operations/basic-kafka-operations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/082/operations/basic-kafka-operations/</guid><description>Basic Kafka Operations This section will review the most common operations you will perform on your Kafka cluster. All of the tools reviewed in this section are available under the bin/ directory of the Kafka distribution and each tool will print details on all possible commandline options if it is run with no arguments.
Adding and removing topics You have the option of either adding topics manually or having them be created automatically when data is first published to a non-existent topic.</description></item><item><title>Datacenters</title><link>https://example.kafka-site-md.dev/082/operations/datacenters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/082/operations/datacenters/</guid><description>Datacenters Some deployments will need to manage a data pipeline that spans multiple datacenters. Our recommended approach to this is to deploy a local Kafka cluster in each datacenter with application instances in each datacenter interacting only with their local cluster and mirroring between clusters (see the documentation on the mirror maker tool for how to do this).
This deployment pattern allows datacenters to act as independent entities and allows us to manage and tune inter-datacenter replication centrally.</description></item><item><title>Kafka Configuration</title><link>https://example.kafka-site-md.dev/082/operations/kafka-configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/082/operations/kafka-configuration/</guid><description>Kafka Configuration Important Client Configurations The most important producer configurations control
compression sync vs async production batch size (for async producers) The most important consumer configuration is the fetch size.
All configurations are documented in the configuration section.
A Production Server Config Here is our server production server configuration:
# Replication configurations num.replica.fetchers=4 replica.fetch.max.bytes=1048576 replica.fetch.wait.max.ms=500 replica.high.watermark.checkpoint.interval.ms=5000 replica.socket.timeout.ms=30000 replica.socket.receive.buffer.bytes=65536 replica.lag.time.max.ms=10000 replica.lag.max.messages=4000 controller.socket.timeout.ms=30000 controller.message.queue.size=10 # Log configuration num.partitions=8 message.max.bytes=1000000 auto.create.topics.enable=true log.index.interval.bytes=4096 log.index.size.max.bytes=10485760 log.</description></item><item><title>Java Version</title><link>https://example.kafka-site-md.dev/082/operations/java-version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/082/operations/java-version/</guid><description>Java Version We&amp;rsquo;re currently running JDK 1.7 u51, and we&amp;rsquo;ve switched over to the G1 collector. If you do this (and we highly recommend it), make sure you&amp;rsquo;re on u51. We tried out u21 in testing, but we had a number of problems with the GC implementation in that version. Our tuning looks like this:
-Xms4g -Xmx4g -XX:PermSize=48m -XX:MaxPermSize=48m -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 For reference, here are the stats on one of LinkedIn&amp;rsquo;s busiest clusters (at peak): - 15 brokers - 15.</description></item><item><title>Hardware and OS</title><link>https://example.kafka-site-md.dev/082/operations/hardware-and-os/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/082/operations/hardware-and-os/</guid><description>Hardware and OS We are using dual quad-core Intel Xeon machines with 24GB of memory.
You need sufficient memory to buffer active readers and writers. You can do a back-of-the-envelope estimate of memory needs by assuming you want to be able to buffer for 30 seconds and compute your memory need as write_throughput*30.
The disk throughput is important. We have 8x7200 rpm SATA drives. In general disk throughput is the performance bottleneck, and more disks is more better.</description></item><item><title>Monitoring</title><link>https://example.kafka-site-md.dev/082/operations/monitoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/082/operations/monitoring/</guid><description>Monitoring Kafka uses Yammer Metrics for metrics reporting in both the server and the client. This can be configured to report stats using pluggable stats reporters to hook up to your monitoring system.
The easiest way to see the available metrics to fire up jconsole and point it at a running kafka client or server; this will all browsing all metrics with JMX.
We pay particular we do graphing and alerting on the following metrics: Description Mbean name Normal value Message in rate kafka.</description></item><item><title>ZooKeeper</title><link>https://example.kafka-site-md.dev/082/operations/zookeeper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/082/operations/zookeeper/</guid><description>ZooKeeper Stable version At LinkedIn, we are running ZooKeeper 3.3.*. Version 3.3.3 has known serious issues regarding ephemeral node deletion and session expirations. After running into those issues in production, we upgraded to 3.3.4 and have been running that smoothly for over a year now.
Operationalizing ZooKeeper Operationally, we do the following for a healthy ZooKeeper installation:
Redundancy in the physical/hardware/network layout: try not to put them all in the same rack, decent (but don&amp;rsquo;t go nuts) hardware, try to keep redundant power and network paths, etc.</description></item></channel></rss>