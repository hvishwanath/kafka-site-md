<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kafka Streams on</title><link>https://example.kafka-site-md.dev/0102/streams/</link><description>Recent content in Kafka Streams on</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://example.kafka-site-md.dev/0102/streams/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://example.kafka-site-md.dev/0102/streams/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/0102/streams/introduction/</guid><description>Streams Core Concepts Architecture Developer Guide Low-level Processor API High-level Streams DSL Application Configuration and Execution Upgrade Guide and API Changes Overview Kafka Streams is a client library for processing and analyzing data stored in Kafka and either write the resulting data back to Kafka or send the final output to an external system. It builds upon important stream processing concepts such as properly distinguishing between event time and processing time, windowing support, and simple yet efficient management of application state.</description></item><item><title>Core Concepts</title><link>https://example.kafka-site-md.dev/0102/streams/core-concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/0102/streams/core-concepts/</guid><description>Core Concepts We first summarize the key concepts of Kafka Streams.
Stream Processing Topology A stream is the most important abstraction provided by Kafka Streams: it represents an unbounded, continuously updating data set. A stream is an ordered, replayable, and fault-tolerant sequence of immutable data records, where a data record is defined as a key-value pair. A stream processing application is any program that makes use of the Kafka Streams library.</description></item><item><title>Architecture</title><link>https://example.kafka-site-md.dev/0102/streams/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/0102/streams/architecture/</guid><description>Architecture Kafka Streams simplifies application development by building on the Kafka producer and consumer libraries and leveraging the native capabilities of Kafka to offer data parallelism, distributed coordination, fault tolerance, and operational simplicity. In this section, we describe how Kafka Streams works underneath the covers.
The picture below shows the anatomy of an application that uses the Kafka Streams library. Let&amp;rsquo;s walk through some details.
Stream Partitions and Tasks The messaging layer of Kafka partitions data for storing and transporting it.</description></item><item><title>Upgrade Guide</title><link>https://example.kafka-site-md.dev/0102/streams/upgrade-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/0102/streams/upgrade-guide/</guid><description>Upgrade Guide &amp;amp; API Changes If you want to upgrade from 0.10.1.x to 0.10.2, see the Upgrade Section for 0.10.2. It highlights incompatible changes you need to consider to upgrade your code and application. See below a complete list of 0.10.2 API and semantical changes that allow you to advance your application and/or simplify your code base, including the usage of new features.
If you want to upgrade from 0.10.0.x to 0.</description></item></channel></rss>