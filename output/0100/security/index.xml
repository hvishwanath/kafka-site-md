<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security on</title><link>https://example.kafka-site-md.dev/0100/security/</link><description>Recent content in Security on</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://example.kafka-site-md.dev/0100/security/index.xml" rel="self" type="application/rss+xml"/><item><title>Security Overview</title><link>https://example.kafka-site-md.dev/0100/security/security-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/0100/security/security-overview/</guid><description>Security Overview In release 0.9.0.0, the Kafka community added a number of features that, used either separately or together, increases security in a Kafka cluster. These features are considered to be of beta quality. The following security measures are currently supported:
Authentication of connections to brokers from clients (producers and consumers), other brokers and tools, using either SSL or SASL (Kerberos). SASL/PLAIN can also be used from release 0.10.0.0 onwards. Authentication of connections from brokers to ZooKeeper Encryption of data transferred between brokers and clients, between brokers, or between brokers and tools using SSL (Note that there is a performance degradation when SSL is enabled, the magnitude of which depends on the CPU type and the JVM implementation.</description></item><item><title>Encryption and Authentication using SSL</title><link>https://example.kafka-site-md.dev/0100/security/encryption-and-authentication-using-ssl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/0100/security/encryption-and-authentication-using-ssl/</guid><description>Encryption and Authentication using SSL Apache Kafka allows clients to connect over SSL. By default SSL is disabled but can be turned on as needed.
Generate SSL key and certificate for each Kafka broker The first step of deploying HTTPS is to generate the key and the certificate for each machine in the cluster. You can use Java&amp;rsquo;s keytool utility to accomplish this task. We will generate the key into a temporary keystore initially so that we can export and sign it later with CA.</description></item><item><title>Authentication using SASL</title><link>https://example.kafka-site-md.dev/0100/security/authentication-using-sasl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/0100/security/authentication-using-sasl/</guid><description>Authentication using SASL SASL configuration for Kafka brokers 1. Select one or more supported mechanisms to enable in the broker. `GSSAPI` and `PLAIN` are the mechanisms currently supported in Kafka. 2. Add a JAAS config file for the selected mechanisms as described in the examples for setting up GSSAPI (Kerberos) or PLAIN. 3. Pass the JAAS config file location as JVM parameter to each Kafka broker. For example: -Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf 4. Configure a SASL port in server.</description></item><item><title>Authorization and ACLs</title><link>https://example.kafka-site-md.dev/0100/security/authorization-and-acls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/0100/security/authorization-and-acls/</guid><description>Authorization and ACLs Kafka ships with a pluggable Authorizer and an out-of-box authorizer implementation that uses zookeeper to store all the acls. Kafka acls are defined in the general format of &amp;ldquo;Principal P is [Allowed/Denied] Operation O From Host H On Resource R&amp;rdquo;. You can read more about the acl structure on KIP-11. In order to add, remove or list acls you can use the Kafka authorizer CLI. By default, if a Resource R has no associated acls, no one other than super users is allowed to access R.</description></item><item><title>Incorporating Security Features in a Running Cluster</title><link>https://example.kafka-site-md.dev/0100/security/incorporating-security-features-in-a-running-cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/0100/security/incorporating-security-features-in-a-running-cluster/</guid><description>Incorporating Security Features in a Running Cluster You can secure a running cluster via one or more of the supported protocols discussed previously. This is done in phases:
Incrementally bounce the cluster nodes to open additional secured port(s). Restart clients using the secured rather than PLAINTEXT port (assuming you are securing the client-broker connection). Incrementally bounce the cluster again to enable broker-to-broker security (if this is required) A final incremental bounce to close the PLAINTEXT port.</description></item><item><title>ZooKeeper Authentication</title><link>https://example.kafka-site-md.dev/0100/security/zookeeper-authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/0100/security/zookeeper-authentication/</guid><description>ZooKeeper Authentication New clusters To enable ZooKeeper authentication on brokers, there are two necessary steps:
Create a JAAS login file and set the appropriate system property to point to it as described above Set the configuration property zookeeper.set.acl in each broker to true The metadata stored in ZooKeeper is such that only brokers will be able to modify the corresponding znodes, but znodes are world readable. The rationale behind this decision is that the data stored in ZooKeeper is not sensitive, but inappropriate manipulation of znodes can cause cluster disruption.</description></item></channel></rss>