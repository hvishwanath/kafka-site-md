<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on</title><link>https://example.kafka-site-md.dev/41/getting-started/</link><description>Recent content in Getting Started on</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://example.kafka-site-md.dev/41/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://example.kafka-site-md.dev/41/getting-started/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/41/getting-started/introduction/</guid><description>What is event streaming? Event streaming is the digital equivalent of the human body&amp;rsquo;s central nervous system. It is the technological foundation for the &amp;lsquo;always-on&amp;rsquo; world where businesses are increasingly software-defined and automated, and where the user of software is more software.
Technically speaking, event streaming is the practice of capturing data in real-time from event sources like databases, sensors, mobile devices, cloud services, and software applications in the form of streams of events; storing these event streams durably for later retrieval; manipulating, processing, and reacting to the event streams in real-time as well as retrospectively; and routing the event streams to different destination technologies as needed.</description></item><item><title>Use Cases</title><link>https://example.kafka-site-md.dev/41/getting-started/uses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/41/getting-started/uses/</guid><description>Here is a description of a few of the popular use cases for Apache Kafka®. For an overview of a number of these areas in action, see this blog post.
Messaging Kafka works well as a replacement for a more traditional message broker. Message brokers are used for a variety of reasons (to decouple processing from data producers, to buffer unprocessed messages, etc). In comparison to most messaging systems Kafka has better throughput, built-in partitioning, replication, and fault-tolerance which makes it a good solution for large scale message processing applications.</description></item><item><title>Quick Start</title><link>https://example.kafka-site-md.dev/41/getting-started/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/41/getting-started/quickstart/</guid><description>Step 1: Get Kafka Download the latest Kafka release and extract it:
$ tar -xzf kafka_2.13-4.1.0.tgz $ cd kafka_2.13-4.1.0 Step 2: Start the Kafka environment NOTE: Your local environment must have Java 17+ installed.
Kafka can be run using local scripts and downloaded files or the docker image.
Using downloaded files Generate a Cluster UUID
$ KAFKA_CLUSTER_ID=&amp;quot;$(bin/kafka-storage.sh random-uuid)&amp;quot; Format Log Directories
$ bin/kafka-storage.sh format --standalone -t $KAFKA_CLUSTER_ID -c config/server.properties Start the Kafka Server</description></item><item><title>Ecosystem</title><link>https://example.kafka-site-md.dev/41/getting-started/ecosystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/41/getting-started/ecosystem/</guid><description>There are a plethora of tools that integrate with Kafka outside the main distribution. The ecosystem page lists many of these, including stream processing systems, Hadoop integration, monitoring, and deployment tools.</description></item><item><title>Upgrading</title><link>https://example.kafka-site-md.dev/41/getting-started/upgrade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/41/getting-started/upgrade/</guid><description>Upgrading to 4.1.0 Upgrading Servers to 4.1.0 from any version 3.3.x through 4.0.x Notable changes in 4.1.0 Apache Kafka 4.1 ships with a preview of Queues for Kafka (KIP-932). This feature introduces a new kind of group called share groups, as an alternative to consumer groups. Consumers in a share group cooperatively consume records from topics, without assigning each partition to just one consumer. Share groups also introduce per-record acknowledgement and counting of delivery attempts.</description></item><item><title>KRaft vs ZooKeeper</title><link>https://example.kafka-site-md.dev/41/getting-started/zk2kraft/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/41/getting-started/zk2kraft/</guid><description>Differences Between KRaft mode and ZooKeeper mode Removed ZooKeeper Features This section documents differences in behavior between KRaft mode and ZooKeeper mode. Specifically, several configurations, metrics and features have changed or are no longer required in KRaft mode. To migrate an existing cluster from ZooKeeper mode to KRaft mode, please refer to the ZooKeeper to KRaft Migration section.
Configurations Removed password encoder-related configurations. These configurations were used in ZooKeeper mode to define the key and backup key for encrypting sensitive data (e.</description></item><item><title>Compatibility</title><link>https://example.kafka-site-md.dev/41/getting-started/compatibility/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/41/getting-started/compatibility/</guid><description>Compatibility With the release of Kafka 4.0, significant changes have been introduced that impact compatibility across various components. To assist users in planning upgrades and ensuring seamless interoperability, a comprehensive compatibility matrix has been prepared.
JDK Compatibility Across Kafka Versions Module Kafka Version Java 11 Java 17 Java 23 Clients 4.0.0 ✅ ✅ ✅ Streams 4.0.0 ✅ ✅ ✅ Connect 4.0.0 ❌ ✅ ✅ Server 4.0.0 ❌ ✅ ✅ Note: Java 8 is removed in Kafka 4.</description></item><item><title>Docker</title><link>https://example.kafka-site-md.dev/41/getting-started/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/41/getting-started/docker/</guid><description>JVM Based Apache Kafka Docker Image Docker is a popular container runtime. Docker images for the JVM based Apache Kafka can be found on Docker Hub and are available from version 3.7.0.
Docker image can be pulled from Docker Hub using the following command:
$ docker pull apache/kafka:4.1.0 If you want to fetch the latest version of the Docker image use following command:
$ docker pull apache/kafka:latest To start the Kafka container using this Docker image with default configs and on default port 9092:</description></item></channel></rss>