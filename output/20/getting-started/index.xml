<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on</title><link>https://example.kafka-site-md.dev/20/getting-started/</link><description>Recent content in Getting Started on</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://example.kafka-site-md.dev/20/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://example.kafka-site-md.dev/20/getting-started/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/20/getting-started/introduction/</guid><description>Apache Kafka® is a distributed streaming platform. What exactly does that mean? A streaming platform has three key capabilities:
Publish and subscribe to streams of records, similar to a message queue or enterprise messaging system. Store streams of records in a fault-tolerant durable way. Process streams of records as they occur. Kafka is generally used for two broad classes of applications:
Building real-time streaming data pipelines that reliably get data between systems or applications Building real-time streaming applications that transform or react to the streams of data To understand how Kafka does these things, let&amp;rsquo;s dive in and explore Kafka&amp;rsquo;s capabilities from the bottom up.</description></item><item><title>Use Cases</title><link>https://example.kafka-site-md.dev/20/getting-started/uses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/20/getting-started/uses/</guid><description>Here is a description of a few of the popular use cases for Apache Kafka®. For an overview of a number of these areas in action, see this blog post.
Messaging Kafka works well as a replacement for a more traditional message broker. Message brokers are used for a variety of reasons (to decouple processing from data producers, to buffer unprocessed messages, etc). In comparison to most messaging systems Kafka has better throughput, built-in partitioning, replication, and fault-tolerance which makes it a good solution for large scale message processing applications.</description></item><item><title>Quick Start</title><link>https://example.kafka-site-md.dev/20/getting-started/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/20/getting-started/quickstart/</guid><description>This tutorial assumes you are starting fresh and have no existing Kafka or ZooKeeper data. Since Kafka console scripts are different for Unix-based and Windows platforms, on Windows platforms use bin\windows\ instead of bin/, and change the script extension to .bat.
Step 1: Download the code Download the 2.0.0 release and un-tar it.
&amp;gt; tar -xzf kafka_2.11-2.0.0.tgz &amp;gt; cd kafka_2.11-2.0.0 Step 2: Start the server Kafka uses ZooKeeper so you need to first start a ZooKeeper server if you don&amp;rsquo;t already have one.</description></item><item><title>Ecosystem</title><link>https://example.kafka-site-md.dev/20/getting-started/ecosystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/20/getting-started/ecosystem/</guid><description>There are a plethora of tools that integrate with Kafka outside the main distribution. The ecosystem page lists many of these, including stream processing systems, Hadoop integration, monitoring, and deployment tools.</description></item><item><title>Upgrading</title><link>https://example.kafka-site-md.dev/20/getting-started/upgrade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/20/getting-started/upgrade/</guid><description>Upgrading from 0.8.x, 0.9.x, 0.10.0.x, 0.10.1.x, 0.10.2.x, 0.11.0.x, 1.0.x, or 1.1.x to 2.0.0 Kafka 2.0.0 introduces wire protocol changes. By following the recommended rolling upgrade plan below, you guarantee no downtime during the upgrade. However, please review the notable changes in 2.0.0 before upgrading.
For a rolling upgrade:
Update server.properties on all brokers and add the following properties. CURRENT_KAFKA_VERSION refers to the version you are upgrading from. CURRENT_MESSAGE_FORMAT_VERSION refers to the message format version currently in use.</description></item></channel></rss>