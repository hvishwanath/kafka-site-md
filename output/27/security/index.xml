<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security on</title><link>https://example.kafka-site-md.dev/27/security/</link><description>Recent content in Security on</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://example.kafka-site-md.dev/27/security/index.xml" rel="self" type="application/rss+xml"/><item><title>Security Overview</title><link>https://example.kafka-site-md.dev/27/security/security-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/27/security/security-overview/</guid><description>Security Overview In release 0.9.0.0, the Kafka community added a number of features that, used either separately or together, increases security in a Kafka cluster. The following security measures are currently supported:
Authentication of connections to brokers from clients (producers and consumers), other brokers and tools, using either SSL or SASL. Kafka supports the following SASL mechanisms: SASL/GSSAPI (Kerberos) - starting at version 0.9.0.0 SASL/PLAIN - starting at version 0.10.0.0 SASL/SCRAM-SHA-256 and SASL/SCRAM-SHA-512 - starting at version 0.</description></item><item><title>Encryption and Authentication using SSL</title><link>https://example.kafka-site-md.dev/27/security/encryption-and-authentication-using-ssl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/27/security/encryption-and-authentication-using-ssl/</guid><description>Encryption and Authentication using SSL Apache Kafka allows clients to use SSL for encryption of traffic as well as authentication. By default, SSL is disabled but can be turned on if needed. The following paragraphs explain in detail how to set up your own PKI infrastructure, use it to create certificates and configure Kafka to use these.
Generate SSL key and certificate for each Kafka broker The first step of deploying one or more brokers with SSL support is to generate a public/private keypair for every server.</description></item><item><title>Authentication using SASL</title><link>https://example.kafka-site-md.dev/27/security/authentication-using-sasl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/27/security/authentication-using-sasl/</guid><description>Authentication using SASL JAAS configuration Kafka uses the Java Authentication and Authorization Service (JAAS) for SASL configuration.
1. ##### JAAS configuration for Kafka brokers KafkaServer is the section name in the JAAS file used by each KafkaServer/Broker. This section provides SASL configuration options for the broker including any SASL client connections made by the broker for inter-broker communication. If multiple listeners are configured to use SASL, the section name may be prefixed with the listener name in lower-case followed by a period, e.</description></item><item><title>Authorization and ACLs</title><link>https://example.kafka-site-md.dev/27/security/authorization-and-acls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/27/security/authorization-and-acls/</guid><description>Authorization and ACLs Kafka ships with a pluggable Authorizer and an out-of-box authorizer implementation that uses zookeeper to store all the acls. The Authorizer is configured by setting authorizer.class.name in server.properties. To enable the out of the box implementation use:
authorizer.class.name=kafka.security.authorizer.AclAuthorizer Kafka acls are defined in the general format of &amp;ldquo;Principal P is [Allowed/Denied] Operation O From Host H on any Resource R matching ResourcePattern RP&amp;rdquo;. You can read more about the acl structure in KIP-11 and resource patterns in KIP-290.</description></item><item><title>Incorporating Security Features in a Running Cluster</title><link>https://example.kafka-site-md.dev/27/security/incorporating-security-features-in-a-running-cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/27/security/incorporating-security-features-in-a-running-cluster/</guid><description>Incorporating Security Features in a Running Cluster You can secure a running cluster via one or more of the supported protocols discussed previously. This is done in phases:
Incrementally bounce the cluster nodes to open additional secured port(s). Restart clients using the secured rather than PLAINTEXT port (assuming you are securing the client-broker connection). Incrementally bounce the cluster again to enable broker-to-broker security (if this is required) A final incremental bounce to close the PLAINTEXT port.</description></item><item><title>ZooKeeper Authentication</title><link>https://example.kafka-site-md.dev/27/security/zookeeper-authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/27/security/zookeeper-authentication/</guid><description>ZooKeeper Authentication ZooKeeper supports mutual TLS (mTLS) authentication beginning with the 3.5.x versions. Kafka supports authenticating to ZooKeeper with SASL and mTLS &amp;ndash; either individually or both together &amp;ndash; beginning with version 2.5. See KIP-515: Enable ZK client to use the new TLS supported authentication for more details.
When using mTLS alone, every broker and any CLI tools (such as the ZooKeeper Security Migration Tool) should identify itself with the same Distinguished Name (DN) because it is the DN that is ACL&amp;rsquo;ed.</description></item><item><title>ZooKeeper Encryption</title><link>https://example.kafka-site-md.dev/27/security/zookeeper-encryption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/27/security/zookeeper-encryption/</guid><description>ZooKeeper Encryption ZooKeeper connections that use mutual TLS are encrypted. Beginning with ZooKeeper version 3.5.7 (the version shipped with Kafka version 2.5) ZooKeeper supports a sever-side config ssl.clientAuth (case-insensitively: want/need/none are the valid options, the default is need), and setting this value to none in ZooKeeper allows clients to connect via a TLS-encrypted connection without presenting their own certificate. Here is a sample (partial) Kafka Broker configuration for connecting to ZooKeeper with just TLS encryption.</description></item></channel></rss>