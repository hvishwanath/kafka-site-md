<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kafka Streams on</title><link>https://example.kafka-site-md.dev/0110/streams/</link><description>Recent content in Kafka Streams on</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://example.kafka-site-md.dev/0110/streams/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://example.kafka-site-md.dev/0110/streams/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/0110/streams/introduction/</guid><description>Kafka Streams API The easiest way to write mission-critical real-time applications and microservices with all the benefits of Kafka&amp;rsquo;s server-side cluster technology. Write your first app Play with demo app
Write standard Java applications Exactly-once processing semantics No seperate processing cluster required Develop on Mac, Linux, Windows Elastic, highly scalable, fault-tolerant Deploy to containers, VMs, bare metal, cloud Equally viable for small, medium, &amp;amp; large use cases Fully integrated with Kafka security Developer manual Tutorials Concepts Hello Kafka Streams The code example below implements a WordCount application that is elastic, highly scalable, fault-tolerant, stateful, and ready to run in production at large scale</description></item><item><title>Quick Start</title><link>https://example.kafka-site-md.dev/0110/streams/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/0110/streams/quickstart/</guid><description>Play with a Streams Application This tutorial assumes you are starting fresh and have no existing Kafka or ZooKeeper data. However, if you have already started Kafka and Zookeeper, feel free to skip the first two steps.
Kafka Streams is a client library for building mission-critical real-time applications and microservices, where the input and/or output data is stored in Kafka clusters. Kafka Streams combines the simplicity of writing and deploying standard Java and Scala applications on the client side with the benefits of Kafka&amp;rsquo;s server-side cluster technology to make these applications highly scalable, elastic, fault-tolerant, distributed, and much more.</description></item><item><title>Write a streams app</title><link>https://example.kafka-site-md.dev/0110/streams/tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/0110/streams/tutorial/</guid><description>Write your own Streams Applications In this guide we will start from scratch on setting up your own project to write a stream processing application using Kafka&amp;rsquo;s Streams API. It is highly recommended to read the quickstart first on how to run a Streams application written in Kafka Streams if you have not done so.
Setting up a Maven Project We are going to use a Kafka Streams Maven Archetype for creating a Streams project structure with the following commands:</description></item><item><title>Core Concepts</title><link>https://example.kafka-site-md.dev/0110/streams/core-concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/0110/streams/core-concepts/</guid><description>Core Concepts Kafka Streams is a client library for processing and analyzing data stored in Kafka. It builds upon important stream processing concepts such as properly distinguishing between event time and processing time, windowing support, and simple yet efficient management of application state.
Kafka Streams has a low barrier to entry : You can quickly write and run a small-scale proof-of-concept on a single machine; and you only need to run additional instances of your application on multiple machines to scale up to high-volume production workloads.</description></item><item><title>Architecture</title><link>https://example.kafka-site-md.dev/0110/streams/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/0110/streams/architecture/</guid><description>Architecture Kafka Streams simplifies application development by building on the Kafka producer and consumer libraries and leveraging the native capabilities of Kafka to offer data parallelism, distributed coordination, fault tolerance, and operational simplicity. In this section, we describe how Kafka Streams works underneath the covers.
The picture below shows the anatomy of an application that uses the Kafka Streams library. Let&amp;rsquo;s walk through some details.
Stream Partitions and Tasks The messaging layer of Kafka partitions data for storing and transporting it.</description></item><item><title>Upgrade Guide</title><link>https://example.kafka-site-md.dev/0110/streams/upgrade-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/0110/streams/upgrade-guide/</guid><description>Upgrade Guide &amp;amp; API Changes If you want to upgrade from 0.10.2.x to 0.11.0 you don&amp;rsquo;t need to do any code changes as the public API is fully backward compatible. However, some configuration parameters were deprecated and thus it is recommend to update your code eventually to allow for future upgrades. See below a complete list of 0.11.0 API and semantical changes that allow you to advance your application and/or simplify your code base, including the usage of new features.</description></item></channel></rss>