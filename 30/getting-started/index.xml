<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on</title><link>https://example.kafka-site-md.dev/30/getting-started/</link><description>Recent content in Getting Started on</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://example.kafka-site-md.dev/30/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://example.kafka-site-md.dev/30/getting-started/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/30/getting-started/introduction/</guid><description>What is event streaming? Event streaming is the digital equivalent of the human body&amp;rsquo;s central nervous system. It is the technological foundation for the &amp;lsquo;always-on&amp;rsquo; world where businesses are increasingly software-defined and automated, and where the user of software is more software.
Technically speaking, event streaming is the practice of capturing data in real-time from event sources like databases, sensors, mobile devices, cloud services, and software applications in the form of streams of events; storing these event streams durably for later retrieval; manipulating, processing, and reacting to the event streams in real-time as well as retrospectively; and routing the event streams to different destination technologies as needed.</description></item><item><title>Use Cases</title><link>https://example.kafka-site-md.dev/30/getting-started/uses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/30/getting-started/uses/</guid><description>Here is a description of a few of the popular use cases for Apache KafkaÂ®. For an overview of a number of these areas in action, see this blog post.
Messaging Kafka works well as a replacement for a more traditional message broker. Message brokers are used for a variety of reasons (to decouple processing from data producers, to buffer unprocessed messages, etc). In comparison to most messaging systems Kafka has better throughput, built-in partitioning, replication, and fault-tolerance which makes it a good solution for large scale message processing applications.</description></item><item><title>Quick Start</title><link>https://example.kafka-site-md.dev/30/getting-started/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/30/getting-started/quickstart/</guid><description>Step 1: Get Kafka Download the latest Kafka release and extract it:
$ tar -xzf kafka_2.13-3.0.1.tgz $ cd kafka_2.13-3.0.1 Step 2: Start the Kafka environment NOTE: Your local environment must have Java 8+ installed.
Run the following commands in order to start all services in the correct order:
# Start the ZooKeeper service # Note: Soon, ZooKeeper will no longer be required by Apache Kafka. $ bin/zookeeper-server-start.sh config/zookeeper.properties Open another terminal session and run:</description></item><item><title>Ecosystem</title><link>https://example.kafka-site-md.dev/30/getting-started/ecosystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/30/getting-started/ecosystem/</guid><description>There are a plethora of tools that integrate with Kafka outside the main distribution. The ecosystem page lists many of these, including stream processing systems, Hadoop integration, monitoring, and deployment tools.</description></item><item><title>Upgrading</title><link>https://example.kafka-site-md.dev/30/getting-started/upgrade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/30/getting-started/upgrade/</guid><description>Notable changes in 3.0.1 Idempotence for the producer is enabled by default if no conflicting configurations are set. A bug prevented the producer idempotence default from being applied which meant that it remained disabled unless the user had explicitly set enable.idempotence to true. See KAFKA-13598for more details. This issue was fixed and the default is properly applied. Notable changes in 3.0.0 The producer has stronger delivery guarantees by default: idempotence is enabled and acks is set to all instead of 1.</description></item></channel></rss>