<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on</title><link>https://example.kafka-site-md.dev/08/getting-started/</link><description>Recent content in Getting Started on</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://example.kafka-site-md.dev/08/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://example.kafka-site-md.dev/08/getting-started/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/08/getting-started/introduction/</guid><description>Introduction KafkaÂ® is a distributed, partitioned, replicated commit log service. It provides the functionality of a messaging system, but with a unique design.
What does all that mean?
First let&amp;rsquo;s review some basic messaging terminology:
Kafka maintains feeds of messages in categories called topics. We&amp;rsquo;ll call processes that publish messages to a Kafka topic producers. We&amp;rsquo;ll call processes that subscribe to topics and process the feed of published messages consumers.. Kafka is run as a cluster comprised of one or more servers each of which is called a broker.</description></item><item><title>Use Cases</title><link>https://example.kafka-site-md.dev/08/getting-started/uses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/08/getting-started/uses/</guid><description>Use Cases Here is a description of a few of the popular use cases for Apache Kafka. For an overview of a number of these areas in action, see this paper.
Messaging Kafka works well as a replacement for a more traditional message broker. Message brokers are used for a variety of reasons (to decouple processing from data producers, to buffer unprocessed messages, etc). In comparison to most messaging systems Kafka has better throughput, built-in partitioning, replication, and fault-tolerance which makes it a good solution for large scale message processing applications.</description></item><item><title>Quick Start</title><link>https://example.kafka-site-md.dev/08/getting-started/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/08/getting-started/quickstart/</guid><description>Quick Start Step 1: Download the code Download the 0.8 release.
**&amp;gt; tar xzf kafka-&amp;lt;VERSION&amp;gt;.tgz** **&amp;gt; cd kafka-&amp;lt;VERSION&amp;gt;** **&amp;gt; ./sbt update** **&amp;gt; ./sbt package** **&amp;gt; ./sbt assembly-package-dependency** This tutorial assumes you are starting on a fresh zookeeper instance with no pre-existing data. If you want to migrate from an existing 0.7 installation you will need to follow the migration instructions.
Step 2: Start the server Kafka uses zookeeper so you need to first start a zookeeper server if you don&amp;rsquo;t already have one.</description></item><item><title>Upgrading</title><link>https://example.kafka-site-md.dev/08/getting-started/upgrade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.kafka-site-md.dev/08/getting-started/upgrade/</guid><description>Upgrading from 0.7 Since 0.8 is not backward compatible with 0.7.x, we provide a tool for migrating data in an 0.7 cluster to an 0.8 cluster. Details of the tool can be found here.</description></item></channel></rss>